// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/model/axis_goertzel_ip_src_model.v
// Created: 2021-03-17 20:02:35
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.2
// Target subsystem base rate: 0.2
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.2
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// re_data_out                   ce_out        0.2
// re_data_valid                 ce_out        0.2
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: axis_goertzel_ip_src_model
// Source Path: model
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module axis_goertzel_ip_src_model
          (clk,
           reset,
           clk_enable,
           data_in,
           cos_input,
           wkn_re,
           wkn_im,
           in_data_valid,
           ce_out,
           re_data_out,
           re_data_valid);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [31:0] data_in;  // sfix32_En31
  input   signed [31:0] cos_input;  // sfix32_En28
  input   signed [31:0] wkn_re;  // sfix32_En28
  input   signed [31:0] wkn_im;  // sfix32_En28
  input   in_data_valid;
  output  ce_out;
  output  signed [31:0] re_data_out;  // sfix32_En31
  output  re_data_valid;


  wire enb;
  wire signed [31:0] goertzel_system_out1;  // sfix32_En31
  wire goertzel_system_out3;
  reg  [0:1] delayMatch_reg;  // ufix1 [2]
  wire [0:1] delayMatch_reg_next;  // ufix1 [2]
  wire goertzel_system_out3_1;


  axis_goertzel_ip_src_goertzel_system u_goertzel_system (.clk(clk),
                                                          .reset(reset),
                                                          .enb(clk_enable),
                                                          .data_in(data_in),  // sfix32_En31
                                                          .cos_input(cos_input),  // sfix32_En28
                                                          .wkn_re(wkn_re),  // sfix32_En28
                                                          .data_in_valid(in_data_valid),
                                                          .re_data_out(goertzel_system_out1),  // sfix32_En31
                                                          .re_tvalid(goertzel_system_out3)
                                                          );

  assign re_data_out = goertzel_system_out1;

  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 1'b0;
        delayMatch_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign goertzel_system_out3_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = goertzel_system_out3;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign re_data_valid = goertzel_system_out3_1;

  assign ce_out = clk_enable;

endmodule  // axis_goertzel_ip_src_model

