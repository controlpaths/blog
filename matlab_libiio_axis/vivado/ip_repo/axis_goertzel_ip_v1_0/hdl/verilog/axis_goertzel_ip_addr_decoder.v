// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/model/axis_goertzel_ip_addr_decoder.v
// Created: 2021-03-17 20:02:41
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: axis_goertzel_ip_addr_decoder
// Source Path: axis_goertzel_ip/axis_goertzel_ip_axi_lite/axis_goertzel_ip_addr_decoder
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module axis_goertzel_ip_addr_decoder
          (clk,
           reset,
           data_write,
           addr_sel,
           wr_enb,
           rd_enb,
           read_ip_timestamp,
           data_read,
           write_axi_enable,
           write_packet_size_axi4_stream_master,
           write_cos_input,
           write_wkn_re,
           write_wkn_im);


  input   clk;
  input   reset;
  input   [31:0] data_write;  // ufix32
  input   [13:0] addr_sel;  // ufix14
  input   wr_enb;  // ufix1
  input   rd_enb;  // ufix1
  input   [31:0] read_ip_timestamp;  // ufix32
  output  [31:0] data_read;  // ufix32
  output  write_axi_enable;  // ufix1
  output  [31:0] write_packet_size_axi4_stream_master;  // ufix32
  output  signed [31:0] write_cos_input;  // sfix32_En28
  output  signed [31:0] write_wkn_re;  // sfix32_En28
  output  signed [31:0] write_wkn_im;  // sfix32_En28


  wire enb;
  wire decode_sel_ip_timestamp_1_1;  // ufix1
  wire const_1;  // ufix1
  wire [31:0] const_0;  // ufix32
  reg [31:0] read_reg_ip_timestamp;  // ufix32
  wire [31:0] decode_rd_ip_timestamp_1_1;  // ufix32
  wire decode_sel_axi_enable_1_1;  // ufix1
  wire reg_enb_axi_enable_1_1;  // ufix1
  wire data_in_axi_enable;  // ufix1
  reg  data_reg_axi_enable_1_1;  // ufix1
  wire write_concats_axi_enable_1;  // ufix1
  wire decode_sel_packet_size_axi4_stream_master_1_1;  // ufix1
  wire reg_enb_packet_size_axi4_stream_master_1_1;  // ufix1
  reg [31:0] data_reg_packet_size_axi4_stream_master_1_1;  // ufix32
  wire decode_sel_cos_input_1_1;  // ufix1
  wire reg_enb_cos_input_1_1;  // ufix1
  wire signed [31:0] data_in_cos_input;  // sfix32_En28
  reg signed [31:0] data_reg_cos_input_1_1;  // sfix32_En28
  wire decode_sel_wkn_re_1_1;  // ufix1
  wire reg_enb_wkn_re_1_1;  // ufix1
  wire signed [31:0] data_in_wkn_re;  // sfix32_En28
  reg signed [31:0] data_reg_wkn_re_1_1;  // sfix32_En28
  wire decode_sel_wkn_im_1_1;  // ufix1
  wire reg_enb_wkn_im_1_1;  // ufix1
  wire signed [31:0] data_in_wkn_im;  // sfix32_En28
  reg signed [31:0] data_reg_wkn_im_1_1;  // sfix32_En28


  assign decode_sel_ip_timestamp_1_1 = addr_sel == 14'b00000000000011;



  assign const_1 = 1'b1;



  assign enb = const_1;

  assign const_0 = 32'b00000000000000000000000000000000;



  always @(posedge clk or posedge reset)
    begin : reg_ip_timestamp_process
      if (reset == 1'b1) begin
        read_reg_ip_timestamp <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_ip_timestamp <= read_ip_timestamp;
        end
      end
    end



  assign decode_rd_ip_timestamp_1_1 = (decode_sel_ip_timestamp_1_1 == 1'b0 ? const_0 :
              read_reg_ip_timestamp);



  assign data_read = decode_rd_ip_timestamp_1_1;

  assign decode_sel_axi_enable_1_1 = addr_sel == 14'b00000000000001;



  assign reg_enb_axi_enable_1_1 = decode_sel_axi_enable_1_1 & wr_enb;



  assign data_in_axi_enable = data_write[0];



  always @(posedge clk or posedge reset)
    begin : reg_axi_enable_1_1_process
      if (reset == 1'b1) begin
        data_reg_axi_enable_1_1 <= 1'b1;
      end
      else begin
        if (enb && reg_enb_axi_enable_1_1) begin
          data_reg_axi_enable_1_1 <= data_in_axi_enable;
        end
      end
    end



  assign write_concats_axi_enable_1 = data_reg_axi_enable_1_1;



  assign write_axi_enable = write_concats_axi_enable_1;

  assign decode_sel_packet_size_axi4_stream_master_1_1 = addr_sel == 14'b00000000000010;



  assign reg_enb_packet_size_axi4_stream_master_1_1 = decode_sel_packet_size_axi4_stream_master_1_1 & wr_enb;



  always @(posedge clk or posedge reset)
    begin : reg_packet_size_axi4_stream_master_1_1_process
      if (reset == 1'b1) begin
        data_reg_packet_size_axi4_stream_master_1_1 <= 32'b00000000000000000000010000000000;
      end
      else begin
        if (enb && reg_enb_packet_size_axi4_stream_master_1_1) begin
          data_reg_packet_size_axi4_stream_master_1_1 <= data_write;
        end
      end
    end



  assign write_packet_size_axi4_stream_master = data_reg_packet_size_axi4_stream_master_1_1;

  assign decode_sel_cos_input_1_1 = addr_sel == 14'b00000001000000;



  assign reg_enb_cos_input_1_1 = decode_sel_cos_input_1_1 & wr_enb;



  assign data_in_cos_input = data_write;



  always @(posedge clk or posedge reset)
    begin : reg_cos_input_1_1_process
      if (reset == 1'b1) begin
        data_reg_cos_input_1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_cos_input_1_1) begin
          data_reg_cos_input_1_1 <= data_in_cos_input;
        end
      end
    end



  assign write_cos_input = data_reg_cos_input_1_1;

  assign decode_sel_wkn_re_1_1 = addr_sel == 14'b00000001000001;



  assign reg_enb_wkn_re_1_1 = decode_sel_wkn_re_1_1 & wr_enb;



  assign data_in_wkn_re = data_write;



  always @(posedge clk or posedge reset)
    begin : reg_wkn_re_1_1_process
      if (reset == 1'b1) begin
        data_reg_wkn_re_1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_wkn_re_1_1) begin
          data_reg_wkn_re_1_1 <= data_in_wkn_re;
        end
      end
    end



  assign write_wkn_re = data_reg_wkn_re_1_1;

  assign decode_sel_wkn_im_1_1 = addr_sel == 14'b00000001000010;



  assign reg_enb_wkn_im_1_1 = decode_sel_wkn_im_1_1 & wr_enb;



  assign data_in_wkn_im = data_write;



  always @(posedge clk or posedge reset)
    begin : reg_wkn_im_1_1_process
      if (reset == 1'b1) begin
        data_reg_wkn_im_1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_wkn_im_1_1) begin
          data_reg_wkn_im_1_1 <= data_in_wkn_im;
        end
      end
    end



  assign write_wkn_im = data_reg_wkn_im_1_1;

endmodule  // axis_goertzel_ip_addr_decoder

