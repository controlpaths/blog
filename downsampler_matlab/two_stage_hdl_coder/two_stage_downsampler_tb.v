// -------------------------------------------------------------
// 
// File Name: two_stage_hdl/two_stage_hdl_coder/two_stage_downsampler_tb.v
// Created: 2022-02-06 18:49:19
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2.5e-06
// Target subsystem base rate: 2.5e-06
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out_1      9e-05
// ce_out_0      0.00036
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out_0      0.00036
// Out2                          ce_out_1      9e-05
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: two_stage_downsampler_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module two_stage_downsampler_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire Out2_done;  // ufix1
  wire ce_out_1;
  wire Out2_done_enb;  // ufix1
  reg [15:0] Out2_addr;  // ufix16
  wire Out2_active;  // ufix1
  wire Out2_enb;  // ufix1
  wire Out2_lastAddr;  // ufix1
  wire resetn;
  reg  check2_done;  // ufix1
  wire Out1_done;  // ufix1
  wire ce_out_0;
  wire Out1_done_enb;  // ufix1
  reg [13:0] Out1_addr;  // ufix14
  wire Out1_active;  // ufix1
  reg [18:0] Data_Type_Conversion2_out1_addr;  // ufix19
  wire Data_Type_Conversion2_out1_active;  // ufix1
  wire phase_4;
  reg  tb_enb_delay;
  wire Data_Type_Conversion2_out1_enb;  // ufix1
  wire [18:0] Data_Type_Conversion2_out1_addr_delay_1;  // ufix19
  wire phase_4_valid;
  reg signed [31:0] fp_In1;  // sfix32
  reg signed [11:0] In1raw;  // sfix12_En11
  reg signed [31:0] status_In1;  // sfix32
  reg [7:0] counter;  // ufix8
  wire phase_4_all;
  wire signed [11:0] rawData_In1;  // sfix12_En11
  reg signed [11:0] holdData_In1;  // sfix12_En11
  reg signed [11:0] In1_offset;  // sfix12_En11
  wire signed [11:0] In1;  // sfix12_En11
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  wire notDone;
  wire signed [11:0] Out1;  // sfix12_En11
  wire signed [11:0] Out2;  // sfix12_En11
  wire Out1_enb;  // ufix1
  wire Out1_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire [13:0] Out1_addr_delay_1;  // ufix14
  reg signed [31:0] fp_Out1_expected;  // sfix32
  reg signed [11:0] Out1_expected;  // sfix12_En11
  reg signed [31:0] status_Out1_expected;  // sfix32
  reg signed [11:0] Out1_ref_hold;  // sfix12_En11
  wire signed [11:0] Out1_refTmp;  // sfix12_En11
  wire signed [11:0] Out1_ref;  // sfix12_En11
  reg  Out1_testFailure;  // ufix1
  wire [15:0] Out2_addr_delay_1;  // ufix16
  reg signed [31:0] fp_Out2_expected;  // sfix32
  reg signed [11:0] Out2_expected;  // sfix12_En11
  reg signed [31:0] status_Out2_expected;  // sfix32
  reg signed [11:0] Out2_ref_hold;  // sfix12_En11
  wire signed [11:0] Out2_refTmp;  // sfix12_En11
  wire signed [11:0] Out2_ref;  // sfix12_En11
  reg  Out2_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign Out2_done_enb = Out2_done & ce_out_1;



  assign Out2_active = Out2_addr != 16'b1000001000110101;



  assign Out2_enb = ce_out_1 & Out2_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 33333
  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        Out2_addr <= 16'b0000000000000000;
      end
      else begin
        if (Out2_enb) begin
          if (Out2_addr >= 16'b1000001000110101) begin
            Out2_addr <= 16'b0000000000000000;
          end
          else begin
            Out2_addr <= Out2_addr + 16'b0000000000000001;
          end
        end
      end
    end



  assign Out2_lastAddr = Out2_addr >= 16'b1000001000110101;



  assign Out2_done = Out2_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_2
      if (reset) begin
        check2_done <= 0;
      end
      else begin
        if (Out2_done_enb) begin
          check2_done <= Out2_done;
        end
      end
    end

  assign Out1_done_enb = Out1_done & ce_out_0;



  assign Out1_active = Out1_addr != 14'b10000010001101;



  assign Data_Type_Conversion2_out1_active = Data_Type_Conversion2_out1_addr != 19'b1001001001111100000;



  assign Data_Type_Conversion2_out1_enb = Data_Type_Conversion2_out1_active & (phase_4 & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 300000
  always @(posedge clk or posedge reset)
    begin : DataTypeConversion2_process
      if (reset == 1'b1) begin
        Data_Type_Conversion2_out1_addr <= 19'b0000000000000000000;
      end
      else begin
        if (Data_Type_Conversion2_out1_enb) begin
          if (Data_Type_Conversion2_out1_addr >= 19'b1001001001111100000) begin
            Data_Type_Conversion2_out1_addr <= 19'b0000000000000000000;
          end
          else begin
            Data_Type_Conversion2_out1_addr <= Data_Type_Conversion2_out1_addr + 19'b0000000000000000001;
          end
        end
      end
    end



  assign #1 Data_Type_Conversion2_out1_addr_delay_1 = Data_Type_Conversion2_out1_addr;

  // Data source for In1
  initial
    begin : In1_fileread
      fp_In1 = $fopen("In1.dat", "r");
      status_In1 = $rewind(fp_In1);
    end

  always @(Data_Type_Conversion2_out1_addr_delay_1, phase_4_valid, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        In1raw <= 0;
      end
      else if (phase_4_valid == 1) begin
        status_In1 = $fscanf(fp_In1, "%h", In1raw);
      end
    end

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 143
  always @(posedge clk or posedge reset)
    begin : slow_clock_enable_process
      if (reset == 1'b1) begin
        counter <= 8'b00000001;
      end
      else begin
        if (tb_enb_delay) begin
          if (counter >= 8'b10001111) begin
            counter <= 8'b00000000;
          end
          else begin
            counter <= counter + 8'b00000001;
          end
        end
      end
    end



  assign phase_4_all = counter % 4 == 1;

  assign phase_4_valid = phase_4_all & tb_enb_delay;



  assign phase_4 = phase_4_valid;

  assign rawData_In1 = (phase_4 == 1'b0 ? 12'sb000000000000 :
              In1raw);



  // holdData reg for Data_Type_Conversion2_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Data_Type_Conversion2_out1
      if (reset) begin
        holdData_In1 <= 0;
      end
      else begin
        holdData_In1 <= rawData_In1;
      end
    end

  always @(rawData_In1 or phase_4_valid or tb_enb_delay)
    begin : stimuli_Data_Type_Conversion2_out1_1
      if (tb_enb_delay == 1'b0) begin
        In1_offset <= 12'b0;
      end
      else begin
        if (phase_4_valid == 1'b0) begin
          In1_offset <= holdData_In1;
        end
        else begin
          In1_offset <= rawData_In1;
        end
      end
    end

  assign #2 In1 = In1_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign notDone = tb_enb_delay & snkDonen;



  assign #2 clk_enable = notDone;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  two_stage_downsampler u_two_stage_downsampler (.clk(clk),
                                                 .reset(reset),
                                                 .clk_enable(clk_enable),
                                                 .In1(In1),  // sfix12_En11
                                                 .ce_out_0(ce_out_0),
                                                 .ce_out_1(ce_out_1),
                                                 .Out1(Out1),  // sfix12_En11
                                                 .Out2(Out2)  // sfix12_En11
                                                 );

  assign Out1_enb = ce_out_0 & Out1_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 8333
  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        Out1_addr <= 14'b00000000000000;
      end
      else begin
        if (Out1_enb) begin
          if (Out1_addr >= 14'b10000010001101) begin
            Out1_addr <= 14'b00000000000000;
          end
          else begin
            Out1_addr <= Out1_addr + 14'b00000000000001;
          end
        end
      end
    end



  assign Out1_lastAddr = Out1_addr >= 14'b10000010001101;



  assign Out1_done = Out1_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (Out1_done_enb) begin
          check1_done <= Out1_done;
        end
      end
    end

  assign snkDone = check1_done & check2_done;



  assign #1 Out1_addr_delay_1 = Out1_addr;

  // Data source for Out1_expected
  initial
    begin : Out1_expected_fileread
      fp_Out1_expected = $fopen("Out1_expected.dat", "r");
      status_Out1_expected = $rewind(fp_Out1_expected);
    end

  always @(Out1_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Out1_expected <= 0;
      end
      else  begin
        status_Out1_expected = $fscanf(fp_Out1_expected, "%h", Out1_expected);
      end
    end

  // Bypass register to hold Out1_ref
  always @(posedge clk or posedge reset)
    begin : DataHold_Out1_ref
      if (reset) begin
        Out1_ref_hold <= 0;
      end
      else begin
        if (ce_out_0) begin
          Out1_ref_hold <= Out1_expected;
        end
      end
    end

  assign Out1_refTmp = Out1_expected;

  assign Out1_ref = (ce_out_0 == 1'b0 ? Out1_ref_hold :
              Out1_refTmp);



  always @(posedge clk or posedge reset)
    begin : Out1_checker
      if (reset == 1'b1) begin
        Out1_testFailure <= 1'b0;
      end
      else begin
        if (ce_out_0 == 1'b1 && Out1 !== Out1_ref) begin
          Out1_testFailure <= 1'b1;
          $display("ERROR in Out1 at time %t : Expected '%h' Actual '%h'", $time, Out1_ref, Out1);
        end
      end
    end

  assign #1 Out2_addr_delay_1 = Out2_addr;

  // Data source for Out2_expected
  initial
    begin : Out2_expected_fileread
      fp_Out2_expected = $fopen("Out2_expected.dat", "r");
      status_Out2_expected = $rewind(fp_Out2_expected);
    end

  always @(Out2_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Out2_expected <= 0;
      end
      else  begin
        status_Out2_expected = $fscanf(fp_Out2_expected, "%h", Out2_expected);
      end
    end

  // Bypass register to hold Out2_ref
  always @(posedge clk or posedge reset)
    begin : DataHold_Out2_ref
      if (reset) begin
        Out2_ref_hold <= 0;
      end
      else begin
        if (ce_out_1) begin
          Out2_ref_hold <= Out2_expected;
        end
      end
    end

  assign Out2_refTmp = Out2_expected;

  assign Out2_ref = (ce_out_1 == 1'b0 ? Out2_ref_hold :
              Out2_refTmp);



  always @(posedge clk or posedge reset)
    begin : Out2_checker
      if (reset == 1'b1) begin
        Out2_testFailure <= 1'b0;
      end
      else begin
        if (ce_out_1 == 1'b1 && Out2 !== Out2_ref) begin
          Out2_testFailure <= 1'b1;
          $display("ERROR in Out2 at time %t : Expected '%h' Actual '%h'", $time, Out2_ref, Out2);
        end
      end
    end

  assign testFailure = Out1_testFailure | Out2_testFailure;



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // two_stage_downsampler_tb

