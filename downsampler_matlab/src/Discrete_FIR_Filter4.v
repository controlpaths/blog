// ------------------------------------------------------------
// 
// File Name: two_stage_hdl/two_stage_hdl_coder/Discrete_FIR_Filter4
// Created: 2022-02-06 17:05:06
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// ------------------------------------------------------------
// 
// 
// ------------------------------------------------------------
// 
// Module: Discrete_FIR_Filter4
// Source Path: /Discrete_FIR_Filter4
// 
// ------------------------------------------------------------
// 
// HDL Implementation    : Partly Serial
// Folding Factor        : 4
// Multipliers           : 6



`timescale 1 ns / 1 ns

module Discrete_FIR_Filter4
               (
                clk,
                enb_4_9_1,
                reset,
                Discrete_FIR_Filter4_in,
                Discrete_FIR_Filter4_out
                );

  input   clk; 
  input   enb_4_9_1; 
  input   reset; 
  input   signed [11:0] Discrete_FIR_Filter4_in; //sfix12_En11
  output  signed [11:0] Discrete_FIR_Filter4_out; //sfix12_En11

////////////////////////////////////////////////////////////////
//Module Architecture: Discrete_FIR_Filter4
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000000010010111; //sfix16_En15
  parameter signed [15:0] coeff2 = 16'b0000000011001010; //sfix16_En15
  parameter signed [15:0] coeff3 = 16'b0000000101010000; //sfix16_En15
  parameter signed [15:0] coeff4 = 16'b0000001000101111; //sfix16_En15
  parameter signed [15:0] coeff5 = 16'b0000001101011110; //sfix16_En15
  parameter signed [15:0] coeff6 = 16'b0000010011001100; //sfix16_En15
  parameter signed [15:0] coeff7 = 16'b0000011001011100; //sfix16_En15
  parameter signed [15:0] coeff8 = 16'b0000011111101011; //sfix16_En15
  parameter signed [15:0] coeff9 = 16'b0000100101010101; //sfix16_En15
  parameter signed [15:0] coeff10 = 16'b0000101001110101; //sfix16_En15
  parameter signed [15:0] coeff11 = 16'b0000101100101110; //sfix16_En15
  parameter signed [15:0] coeff12 = 16'b0000101101101110; //sfix16_En15
  parameter signed [15:0] coeff13 = 16'b0000101100101110; //sfix16_En15
  parameter signed [15:0] coeff14 = 16'b0000101001110101; //sfix16_En15
  parameter signed [15:0] coeff15 = 16'b0000100101010101; //sfix16_En15
  parameter signed [15:0] coeff16 = 16'b0000011111101011; //sfix16_En15
  parameter signed [15:0] coeff17 = 16'b0000011001011100; //sfix16_En15
  parameter signed [15:0] coeff18 = 16'b0000010011001100; //sfix16_En15
  parameter signed [15:0] coeff19 = 16'b0000001101011110; //sfix16_En15
  parameter signed [15:0] coeff20 = 16'b0000001000101111; //sfix16_En15
  parameter signed [15:0] coeff21 = 16'b0000000101010000; //sfix16_En15
  parameter signed [15:0] coeff22 = 16'b0000000011001010; //sfix16_En15
  parameter signed [15:0] coeff23 = 16'b0000000010010111; //sfix16_En15

  // Signals
  reg  [1:0] cur_count; // ufix2
  wire phase_0; // boolean
  wire phase_1; // boolean
  reg  signed [11:0] delay_pipeline [0:22] ; // sfix12_En11
  wire signed [11:0] inputmux_1; // sfix12_En11
  wire signed [11:0] inputmux_2; // sfix12_En11
  wire signed [11:0] inputmux_3; // sfix12_En11
  wire signed [11:0] inputmux_4; // sfix12_En11
  wire signed [11:0] inputmux_5; // sfix12_En11
  wire signed [11:0] inputmux_6; // sfix12_En11
  reg  signed [31:0] acc_final; // sfix32_En26
  reg  signed [31:0] acc_out_1; // sfix32_En26
  wire signed [31:0] product_1; // sfix32_En26
  wire signed [15:0] product_1_mux; // sfix16_En15
  wire signed [27:0] mul_temp; // sfix28_En26
  wire signed [31:0] prod_typeconvert_1; // sfix32_En26
  wire signed [31:0] acc_sum_1; // sfix32_En26
  wire signed [31:0] acc_in_1; // sfix32_En26
  wire signed [31:0] add_cast; // sfix32_En26
  wire signed [31:0] add_cast_1; // sfix32_En26
  wire signed [32:0] add_temp; // sfix33_En26
  reg  signed [31:0] acc_out_2; // sfix32_En26
  wire signed [31:0] product_2; // sfix32_En26
  wire signed [15:0] product_2_mux; // sfix16_En15
  wire signed [27:0] mul_temp_1; // sfix28_En26
  wire signed [31:0] prod_typeconvert_2; // sfix32_En26
  wire signed [31:0] acc_sum_2; // sfix32_En26
  wire signed [31:0] acc_in_2; // sfix32_En26
  wire signed [31:0] add_cast_2; // sfix32_En26
  wire signed [31:0] add_cast_3; // sfix32_En26
  wire signed [32:0] add_temp_1; // sfix33_En26
  reg  signed [31:0] acc_out_3; // sfix32_En26
  wire signed [31:0] product_3; // sfix32_En26
  wire signed [15:0] product_3_mux; // sfix16_En15
  wire signed [27:0] mul_temp_2; // sfix28_En26
  wire signed [31:0] prod_typeconvert_3; // sfix32_En26
  wire signed [31:0] acc_sum_3; // sfix32_En26
  wire signed [31:0] acc_in_3; // sfix32_En26
  wire signed [31:0] add_cast_4; // sfix32_En26
  wire signed [31:0] add_cast_5; // sfix32_En26
  wire signed [32:0] add_temp_2; // sfix33_En26
  reg  signed [31:0] acc_out_4; // sfix32_En26
  wire signed [31:0] product_4; // sfix32_En26
  wire signed [15:0] product_4_mux; // sfix16_En15
  wire signed [27:0] mul_temp_3; // sfix28_En26
  wire signed [31:0] prod_typeconvert_4; // sfix32_En26
  wire signed [31:0] acc_sum_4; // sfix32_En26
  wire signed [31:0] acc_in_4; // sfix32_En26
  wire signed [31:0] add_cast_6; // sfix32_En26
  wire signed [31:0] add_cast_7; // sfix32_En26
  wire signed [32:0] add_temp_3; // sfix33_En26
  reg  signed [31:0] acc_out_5; // sfix32_En26
  wire signed [31:0] product_5; // sfix32_En26
  wire signed [15:0] product_5_mux; // sfix16_En15
  wire signed [27:0] mul_temp_4; // sfix28_En26
  wire signed [31:0] prod_typeconvert_5; // sfix32_En26
  wire signed [31:0] acc_sum_5; // sfix32_En26
  wire signed [31:0] acc_in_5; // sfix32_En26
  wire signed [31:0] add_cast_8; // sfix32_En26
  wire signed [31:0] add_cast_9; // sfix32_En26
  wire signed [32:0] add_temp_4; // sfix33_En26
  reg  signed [31:0] acc_out_6; // sfix32_En26
  wire signed [31:0] product_6; // sfix32_En26
  wire signed [15:0] product_6_mux; // sfix16_En15
  wire signed [27:0] mul_temp_5; // sfix28_En26
  wire signed [31:0] prod_typeconvert_6; // sfix32_En26
  wire signed [31:0] acc_sum_6; // sfix32_En26
  wire signed [31:0] acc_in_6; // sfix32_En26
  wire signed [31:0] add_cast_10; // sfix32_En26
  wire signed [31:0] add_cast_11; // sfix32_En26
  wire signed [32:0] add_temp_5; // sfix33_En26
  wire signed [31:0] sum1; // sfix32_En26
  wire signed [31:0] add_cast_12; // sfix32_En26
  wire signed [31:0] add_cast_13; // sfix32_En26
  wire signed [32:0] add_temp_6; // sfix33_En26
  wire signed [31:0] sum2; // sfix32_En26
  wire signed [31:0] add_cast_14; // sfix32_En26
  wire signed [31:0] add_cast_15; // sfix32_En26
  wire signed [32:0] add_temp_7; // sfix33_En26
  wire signed [31:0] sum3; // sfix32_En26
  wire signed [31:0] add_cast_16; // sfix32_En26
  wire signed [31:0] add_cast_17; // sfix32_En26
  wire signed [32:0] add_temp_8; // sfix33_En26
  wire signed [31:0] sum4; // sfix32_En26
  wire signed [31:0] add_cast_18; // sfix32_En26
  wire signed [31:0] add_cast_19; // sfix32_En26
  wire signed [32:0] add_temp_9; // sfix33_En26
  wire signed [31:0] sum5; // sfix32_En26
  wire signed [31:0] add_cast_20; // sfix32_En26
  wire signed [31:0] add_cast_21; // sfix32_En26
  wire signed [32:0] add_temp_10; // sfix33_En26
  wire signed [11:0] output_typeconvert; // sfix12_En11

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 2'b00;
      end
      else begin
        if (enb_4_9_1 == 1'b1) begin
          if (cur_count >= 2'b11) begin
            cur_count <= 2'b00;
          end
          else begin
            cur_count <= cur_count + 2'b01;
          end
        end
      end
    end // Counter_process

  assign  phase_0 = (cur_count == 2'b00 && enb_4_9_1 == 1'b1) ? 1'b1 : 1'b0;

  assign phase_1 = (((cur_count == 2'b00) ||
                     (cur_count == 2'b01)  ||
                     (cur_count == 2'b10)) && enb_4_9_1 == 1'b1) ? 1'b1 : 1'b0;

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_pipeline[0] <= Discrete_FIR_Filter4_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
        end
      end
    end // Delay_Pipeline_process


  assign inputmux_1 = (cur_count == 2'b00) ? Discrete_FIR_Filter4_in :
                     (cur_count == 2'b01) ? delay_pipeline[1] :
                     (cur_count == 2'b10) ? delay_pipeline[2] :
                     delay_pipeline[3];

  assign inputmux_2 = (cur_count == 2'b00) ? delay_pipeline[3] :
                     (cur_count == 2'b01) ? delay_pipeline[5] :
                     (cur_count == 2'b10) ? delay_pipeline[6] :
                     delay_pipeline[7];

  assign inputmux_3 = (cur_count == 2'b00) ? delay_pipeline[7] :
                     (cur_count == 2'b01) ? delay_pipeline[9] :
                     (cur_count == 2'b10) ? delay_pipeline[10] :
                     delay_pipeline[11];

  assign inputmux_4 = (cur_count == 2'b00) ? delay_pipeline[11] :
                     (cur_count == 2'b01) ? delay_pipeline[13] :
                     (cur_count == 2'b10) ? delay_pipeline[14] :
                     delay_pipeline[15];

  assign inputmux_5 = (cur_count == 2'b00) ? delay_pipeline[15] :
                     (cur_count == 2'b01) ? delay_pipeline[17] :
                     (cur_count == 2'b10) ? delay_pipeline[18] :
                     delay_pipeline[19];

  assign inputmux_6 = (cur_count == 2'b00) ? delay_pipeline[19] :
                     (cur_count == 2'b01) ? delay_pipeline[21] :
                     delay_pipeline[22];

  //   ------------------ Serial partition # 1 ------------------

  assign product_1_mux = (cur_count == 2'b00) ? coeff1 :
                        (cur_count == 2'b01) ? coeff2 :
                        (cur_count == 2'b10) ? coeff3 :
                        coeff4;
  assign mul_temp = inputmux_1 * product_1_mux;
  assign product_1 = $signed({{4{mul_temp[27]}}, mul_temp});

  assign prod_typeconvert_1 = product_1;

  assign add_cast = prod_typeconvert_1;
  assign add_cast_1 = acc_out_1;
  assign add_temp = add_cast + add_cast_1;
  assign acc_sum_1 = add_temp[31:0];

  assign acc_in_1 = (phase_0 == 1'b1) ? prod_typeconvert_1 :
                   acc_sum_1;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_1_process
      if (reset == 1'b1) begin
        acc_out_1 <= 0;
      end
      else begin
        if (enb_4_9_1 == 1'b1) begin
          acc_out_1 <= acc_in_1;
        end
      end
    end // Acc_reg_1_process

  //   ------------------ Serial partition # 2 ------------------

  assign product_2_mux = (cur_count == 2'b00) ? coeff5 :
                        (cur_count == 2'b01) ? coeff6 :
                        (cur_count == 2'b10) ? coeff7 :
                        coeff8;
  assign mul_temp_1 = inputmux_2 * product_2_mux;
  assign product_2 = $signed({{4{mul_temp_1[27]}}, mul_temp_1});

  assign prod_typeconvert_2 = product_2;

  assign add_cast_2 = prod_typeconvert_2;
  assign add_cast_3 = acc_out_2;
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign acc_sum_2 = add_temp_1[31:0];

  assign acc_in_2 = (phase_0 == 1'b1) ? prod_typeconvert_2 :
                   acc_sum_2;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_2_process
      if (reset == 1'b1) begin
        acc_out_2 <= 0;
      end
      else begin
        if (enb_4_9_1 == 1'b1) begin
          acc_out_2 <= acc_in_2;
        end
      end
    end // Acc_reg_2_process

  //   ------------------ Serial partition # 3 ------------------

  assign product_3_mux = (cur_count == 2'b00) ? coeff9 :
                        (cur_count == 2'b01) ? coeff10 :
                        (cur_count == 2'b10) ? coeff11 :
                        coeff12;
  assign mul_temp_2 = inputmux_3 * product_3_mux;
  assign product_3 = $signed({{4{mul_temp_2[27]}}, mul_temp_2});

  assign prod_typeconvert_3 = product_3;

  assign add_cast_4 = prod_typeconvert_3;
  assign add_cast_5 = acc_out_3;
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign acc_sum_3 = add_temp_2[31:0];

  assign acc_in_3 = (phase_0 == 1'b1) ? prod_typeconvert_3 :
                   acc_sum_3;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_3_process
      if (reset == 1'b1) begin
        acc_out_3 <= 0;
      end
      else begin
        if (enb_4_9_1 == 1'b1) begin
          acc_out_3 <= acc_in_3;
        end
      end
    end // Acc_reg_3_process

  //   ------------------ Serial partition # 4 ------------------

  assign product_4_mux = (cur_count == 2'b00) ? coeff13 :
                        (cur_count == 2'b01) ? coeff14 :
                        (cur_count == 2'b10) ? coeff15 :
                        coeff16;
  assign mul_temp_3 = inputmux_4 * product_4_mux;
  assign product_4 = $signed({{4{mul_temp_3[27]}}, mul_temp_3});

  assign prod_typeconvert_4 = product_4;

  assign add_cast_6 = prod_typeconvert_4;
  assign add_cast_7 = acc_out_4;
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign acc_sum_4 = add_temp_3[31:0];

  assign acc_in_4 = (phase_0 == 1'b1) ? prod_typeconvert_4 :
                   acc_sum_4;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_4_process
      if (reset == 1'b1) begin
        acc_out_4 <= 0;
      end
      else begin
        if (enb_4_9_1 == 1'b1) begin
          acc_out_4 <= acc_in_4;
        end
      end
    end // Acc_reg_4_process

  //   ------------------ Serial partition # 5 ------------------

  assign product_5_mux = (cur_count == 2'b00) ? coeff17 :
                        (cur_count == 2'b01) ? coeff18 :
                        (cur_count == 2'b10) ? coeff19 :
                        coeff20;
  assign mul_temp_4 = inputmux_5 * product_5_mux;
  assign product_5 = $signed({{4{mul_temp_4[27]}}, mul_temp_4});

  assign prod_typeconvert_5 = product_5;

  assign add_cast_8 = prod_typeconvert_5;
  assign add_cast_9 = acc_out_5;
  assign add_temp_4 = add_cast_8 + add_cast_9;
  assign acc_sum_5 = add_temp_4[31:0];

  assign acc_in_5 = (phase_0 == 1'b1) ? prod_typeconvert_5 :
                   acc_sum_5;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_5_process
      if (reset == 1'b1) begin
        acc_out_5 <= 0;
      end
      else begin
        if (enb_4_9_1 == 1'b1) begin
          acc_out_5 <= acc_in_5;
        end
      end
    end // Acc_reg_5_process

  //   ------------------ Serial partition # 6 ------------------

  assign product_6_mux = (cur_count == 2'b00) ? coeff21 :
                        (cur_count == 2'b01) ? coeff22 :
                        coeff23;
  assign mul_temp_5 = inputmux_6 * product_6_mux;
  assign product_6 = $signed({{4{mul_temp_5[27]}}, mul_temp_5});

  assign prod_typeconvert_6 = product_6;

  assign add_cast_10 = prod_typeconvert_6;
  assign add_cast_11 = acc_out_6;
  assign add_temp_5 = add_cast_10 + add_cast_11;
  assign acc_sum_6 = add_temp_5[31:0];

  assign acc_in_6 = (phase_0 == 1'b1) ? prod_typeconvert_6 :
                   acc_sum_6;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_6_process
      if (reset == 1'b1) begin
        acc_out_6 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          acc_out_6 <= acc_in_6;
        end
      end
    end // Acc_reg_6_process

  assign add_cast_12 = acc_out_6;
  assign add_cast_13 = acc_out_5;
  assign add_temp_6 = add_cast_12 + add_cast_13;
  assign sum1 = add_temp_6[31:0];

  assign add_cast_14 = sum1;
  assign add_cast_15 = acc_out_4;
  assign add_temp_7 = add_cast_14 + add_cast_15;
  assign sum2 = add_temp_7[31:0];

  assign add_cast_16 = sum2;
  assign add_cast_17 = acc_out_3;
  assign add_temp_8 = add_cast_16 + add_cast_17;
  assign sum3 = add_temp_8[31:0];

  assign add_cast_18 = sum3;
  assign add_cast_19 = acc_out_2;
  assign add_temp_9 = add_cast_18 + add_cast_19;
  assign sum4 = add_temp_9[31:0];

  assign add_cast_20 = sum4;
  assign add_cast_21 = acc_out_1;
  assign add_temp_10 = add_cast_20 + add_cast_21;
  assign sum5 = add_temp_10[31:0];

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_process
      if (reset == 1'b1) begin
        acc_final <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          acc_final <= sum5;
        end
      end
    end // Finalsum_reg_process

  assign output_typeconvert = acc_final[26:15];

  // Assignment Statements
  assign Discrete_FIR_Filter4_out = output_typeconvert;
endmodule  // Discrete_FIR_Filter4
