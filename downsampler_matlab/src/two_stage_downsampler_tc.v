// -------------------------------------------------------------
// 
// File Name: two_stage_hdl/two_stage_hdl_coder/two_stage_downsampler_tc.v
// Created: 2022-02-06 17:05:08
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: two_stage_downsampler_tc
// Source Path: two stage downsampler_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb_4_1_1   : identical to clk_enable
// enb         : 4x slower than clk with last phase
// enb_4_9_1   : 9x slower than clk with phase 1
// enb_1_9_0   : 36x slower than clk with last phase
// enb_1_9_1   : 36x slower than clk with phase 1
// enb_1_36_1  : 144x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 10 ps

module two_stage_downsampler_tc
          (clk,
           reset,
           clk_enable,
           enb_4_1_1,
           enb,
           enb_4_9_1,
           enb_1_9_0,
           enb_1_9_1,
           enb_1_36_1);


  input   clk;
  input   reset;
  input   clk_enable;
  output  enb_4_1_1;
  output  enb;
  output  enb_4_9_1;
  output  enb_1_9_0;
  output  enb_1_9_1;
  output  enb_1_36_1;


  reg [1:0] count4;  // ufix2
  reg  phase_0;
  wire phase_0_tmp;
  reg [3:0] count9;  // ufix4
  reg  phase_1;
  wire phase_1_tmp;
  reg [5:0] count36;  // ufix6
  reg  phase_0_1;
  wire phase_0_tmp_1;
  reg  phase_1_1;
  wire phase_1_tmp_1;
  reg [7:0] count144;  // ufix8
  wire phase_all;
  reg  phase_1_2;
  wire phase_1_tmp_2;


  always @ (posedge clk or posedge reset)
    begin: Counter4
      if (reset == 1'b1) begin
        count4 <= 2'b01;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count4 >= 2'b11) begin
            count4 <= 2'b00;
          end
          else begin
            count4 <= count4 + 2'b01;
          end
        end
      end
    end // Counter4

  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end // temp_process1

  assign  phase_0_tmp = (count4 == 2'b11 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: Counter9
      if (reset == 1'b1) begin
        count9 <= 4'b0001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count9 >= 4'b1000) begin
            count9 <= 4'b0000;
          end
          else begin
            count9 <= count9 + 4'b0001;
          end
        end
      end
    end // Counter9

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end // temp_process2

  assign  phase_1_tmp = (count9 == 4'b0000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: Counter36
      if (reset == 1'b1) begin
        count36 <= 6'b000001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count36 >= 6'b100011) begin
            count36 <= 6'b000000;
          end
          else begin
            count36 <= count36 + 6'b000001;
          end
        end
      end
    end // Counter36

  always @ (posedge clk or posedge reset)
    begin: temp_process3
      if (reset == 1'b1) begin
        phase_0_1 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0_1 <= phase_0_tmp_1;
        end
      end
    end // temp_process3

  assign  phase_0_tmp_1 = (count36 == 6'b100011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: temp_process4
      if (reset == 1'b1) begin
        phase_1_1 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1_1 <= phase_1_tmp_1;
        end
      end
    end // temp_process4

  assign  phase_1_tmp_1 = (count36 == 6'b000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: Counter144
      if (reset == 1'b1) begin
        count144 <= 8'b00000001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count144 >= 8'b10001111) begin
            count144 <= 8'b00000000;
          end
          else begin
            count144 <= count144 + 8'b00000001;
          end
        end
      end
    end // Counter144

  assign phase_all = clk_enable ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: temp_process5
      if (reset == 1'b1) begin
        phase_1_2 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1_2 <= phase_1_tmp_2;
        end
      end
    end // temp_process5

  assign  phase_1_tmp_2 = (count144 == 8'b00000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign enb_4_1_1 =  phase_all & clk_enable;

  assign enb =  phase_0 & clk_enable;

  assign enb_4_9_1 =  phase_1 & clk_enable;

  assign enb_1_9_0 =  phase_0_1 & clk_enable;

  assign enb_1_9_1 =  phase_1_1 & clk_enable;

  assign enb_1_36_1 =  phase_1_2 & clk_enable;


endmodule  // two_stage_downsampler_tc

